View(HSV)
HSVData
dataset <- data.frame("Blue" = as.numeric(BlueArray),"Red" = as.numeric(RedArray), "Green" = as.numeric(GreenArray))
dataset$Saturation <- HSVData$SaturationArray
dataset$Value <- HSVData$ValueArray
dataset$Hue <- HSVData$HueArray
HSV <- rgb2hsv(dataset$Red, dataset$Green, dataset$Blue, maxColorValue = 1)
HueArray <- HSV[1,]
SaturationArray <- HSV[2,]
ValueArray <- HSV[3,]
HSVData <- data.frame(HueArray,SaturationArray,ValueArray)
dataset <- data.frame("Blue" = as.numeric(BlueArray),"Red" = as.numeric(RedArray), "Green" = as.numeric(GreenArray))
dataset$Saturation <- HSVData$SaturationArray
dataset$Value <- HSVData$ValueArray
dataset$Hue <- HSVData$HueArray
dataset
dataset <- subset(dataset, Saturation > 0.10)
dataset <- subset(dataset, Value > 0.40)
ColorArray <- rgb(dataset$Red, dataset$Green, dataset$Blue)
dataset$Color <- ColorArray
lines <- data.frame(x = c(0.5, 0, 0.5),
y = c(0.5, 0.5, 0),
z = c(0, 0.5, 0.5),
xend = c(1, 1, 1)/3,
yend = c(1, 1, 1)/3,
zend = c(1, 1, 1)/3)
# ternaryplot
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.1, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
# save output file
ggsave(plot, filename="ColorPlot.png", width=7, height=7)
library(png)
library(magick)
library(ggtern)
# load image file
workimage <- readPNG("1.png")
# parse pixel information from image file
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
# create dataframe from pixel information
dataset <- data.frame("Blue" = as.numeric(BlueArray),"Red" = as.numeric(RedArray), "Green" = as.numeric(GreenArray))
# Filter more pixels based on HSV values
# Create HSV values for respective RGB
HSV <- rgb2hsv(dataset$Red, dataset$Green, dataset$Blue, maxColorValue = 1)
# Keep all H values
datset$Hue <- HSV[1,]
# Keep S > 10
dataset$Saturation <- HSV[2,]
dataset <- subset(dataset, Saturation > 0.1)
# Keep V > 40
dataset$Value <- HSV[3,]
dataset <- subset(dataset, Value > 0.5)
# Create Color Column
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
# axes separator lines for the ternary plot
lines <- data.frame(x = c(0.5, 0, 0.5),
y = c(0.5, 0.5, 0),
z = c(0, 0.5, 0.5),
xend = c(1, 1, 1)/3,
yend = c(1, 1, 1)/3,
zend = c(1, 1, 1)/3)
# ternaryplot
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.1, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
# save output file
ggsave(plot, filename="ColorPlot.png", width=7, height=7)
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.3, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
# save output file
ggsave(plot, filename="ColorPlot.png", width=7, height=7)
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.1, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid() + labs(x = "",y="",z="")
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
dataset <- read.csv("ColData.csv")
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
dataset
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
dataset$Red <- as.numeric(dataset$Red)
dataset$Blue <- as.numeric(dataset$Blue)
dataset$Green <- as.numeric(dataset$Green)
dataset
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
lines <- data.frame(x = c(0.5, 0, 0.5),
y = c(0.5, 0.5, 0),
z = c(0, 0.5, 0.5),
xend = c(1, 1, 1)/3,
yend = c(1, 1, 1)/3,
zend = c(1, 1, 1)/3)
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color ="Blue") +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color ="Black") +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.9, shape = 16, color ="Black") +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
dataset <- read.csv("ColData.csv")
dataset$Red <- as.numeric(dataset$Red)
dataset$Blue <- as.numeric(dataset$Blue)
dataset$Green <- as.numeric(dataset$Green)
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.9, shape = 16, color ="Black") +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
install.packages("gganimate")
library(gapminder)
library(ggplot2)
img <- image_graph(600, 340, res = 96)
datalist <- split(gapminder, gapminder$year)
out <- lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
dev.off()
animation <- image_animate(img, fps = 2)
print(animation)
install.packages("gapminder")
library(gapminder)
library(ggplot2)
img <- image_graph(600, 340, res = 96)
datalist <- split(gapminder, gapminder$year)
out <- lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
dev.off()
animation <- image_animate(img, fps = 2)
print(animation)
library(magick)
library(gganimate)
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
install.packages("gifski")
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
img <- image_graph(600, 340, res = 96)
img
animation <- image_animate(img, fps = 2)
print(animation)
animation
library(png)
library(magick)
library(ggtern)
library(jpeg)
# load image file
workimage <- readJPEG("1.jpg")
workimage <- readPNG("1.png")
# parse pixel information from image file
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
# create dataframe from pixel information
dataset <- data.frame("Blue" = as.numeric(BlueArray),"Red" = as.numeric(RedArray), "Green" = as.numeric(GreenArray))
dataset
write.csv(dataset, "Col.csv")
dataset <- read.csv("Col.csv")
dataset
# Filter more pixels based on HSV values
# Create HSV values for respective RGB
HSV <- rgb2hsv(dataset$Red, dataset$Green, dataset$Blue, maxColorValue = 1)
# Keep all H values
dataset$Hue <- HSV[1,]
dataset$Saturation <- HSV[2,]
dataset$Value <- HSV[3,]
# Keep S > 10
dataset <- subset(dataset, Saturation > 0.1)
# Keep V > 40
dataset <- subset(dataset, Value > 0.5)
# Create Color Column
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
dataset
lines <- data.frame(x = c(0.5, 0, 0.5),
y = c(0.5, 0.5, 0),
z = c(0, 0.5, 0.5),
xend = c(1, 1, 1)/3,
yend = c(1, 1, 1)/3,
zend = c(1, 1, 1)/3)
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid() + transition_time(dataset$Time)
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
plot
plot + transition_time(time)
plot + transition_time(dataset$Time)
ggplot(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = Red)
ggplot(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16)
ggplot(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color)
plot2 <- ggplot(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color)
ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
plot2 + transition_time(dataset$Time)
ggplot(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) + transition_time(Time) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10()
plot2 <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10()
plot2 +  transition_time(year) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
library(gganimate)
plot
plot2
plot2
library(png)
library(magick)
library(ggtern)
library(jpeg)
workimage <- readJPEG("1.jpg")
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
# clear memory
rm(workimage)
# create dataframe from pixel information
dataset <- data.frame("Blue" = as.numeric(BlueArray),"Red" = as.numeric(RedArray), "Green" = as.numeric(GreenArray))
# Filter more pixels based on HSV values
# Create HSV values for respective RGB
HSV <- rgb2hsv(dataset$Red, dataset$Green, dataset$Blue, maxColorValue = 1)
# Keep all H values
dataset$Hue <- HSV[1,]
dataset$Saturation <- HSV[2,]
dataset$Value <- HSV[3,]
# clear memory
rm(HSV)
# Keep S > 10
dataset <- subset(dataset, Saturation > 0.1)
# Keep V > 40
dataset <- subset(dataset, Value > 0.5)
# Create magnitude columne
dataset$Magnitude <- apply(dataset[,c(1:3)], 1, sum)
# sort dataset by magnitude
dataset <- dataset[order(-dataset$Magnitude),c(1,2,3,7)]
# Create Color Column
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
# axes separator lines for the ternary plot
lines <- data.frame(x = c(0.5, 0, 0.5),
y = c(0.5, 0.5, 0),
z = c(0, 0.5, 0.5),
xend = c(1, 1, 1)/3,
yend = c(1, 1, 1)/3,
zend = c(1, 1, 1)/3)
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
ggsave(plot, filename="plot.png" ,width=7, height=7)
dataset
rm(redArray,BlueArray,GreenArray)
rm(RedArray)
rm(plot)
dataset
dataset <- dataset[c(1,2,3,5)]
dataset
rm(dataset)
# load required libraries
library(png)
library(magick)
library(ggtern)
library(jpeg)
imageName <- "1.jpg"
isJPG <- grepl(".jpg", imageName)
isPNG <- grepl(".png", imageName)
# load image file
if(isJPG) {
workimage <- readJPEG(pathString)
}
if(isPNG) {
workimage <- readPNG(pathString)
}
# parse pixel information from image file
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
# create dataframe from pixel information
dataset <- data.frame("Blue" = as.numeric(BlueArray),"Red" = as.numeric(RedArray), "Green" = as.numeric(GreenArray))
# clear memory
rm(workimage,RedArray,GreenArray,BlueArray)
# Filter more pixels based on HSV values
# Create HSV values for respective RGB
HSV <- rgb2hsv(dataset$Red, dataset$Green, dataset$Blue, maxColorValue = 1)
# Keep all H values
dataset$Hue <- HSV[1,]
dataset$Saturation <- HSV[2,]
dataset$Value <- HSV[3,]
workimage <- readJPEG(imageName)
# parse pixel information from image file
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
# create dataframe from pixel information
dataset <- data.frame("Blue" = as.numeric(BlueArray),"Red" = as.numeric(RedArray), "Green" = as.numeric(GreenArray))
# clear memory
rm(workimage,RedArray,GreenArray,BlueArray)
# Filter more pixels based on HSV values
# Create HSV values for respective RGB
HSV <- rgb2hsv(dataset$Red, dataset$Green, dataset$Blue, maxColorValue = 1)
# Keep all H values
dataset$Hue <- HSV[1,]
dataset$Saturation <- HSV[2,]
dataset$Value <- HSV[3,]
# clear memory
rm(HSV)
# Keep S > 10
dataset <- subset(dataset, Saturation > 0.1)
# Keep V > 40
dataset <- subset(dataset, Value > 0.5)
# Create magnitude columne
dataset$Magnitude <- apply(dataset[,c(1:3)], 1, sum)
# sort dataset by magnitude
dataset <- dataset[order(-dataset$Magnitude),c(1,2,3,7)]
# optimise dataset
dataset <- dataset[c(1,2,3,5)]
# Create Color Column
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
# axes separator lines for the ternary plot
lines <- data.frame(x = c(0.5, 0, 0.5),
y = c(0.5, 0.5, 0),
z = c(0, 0.5, 0.5),
xend = c(1, 1, 1)/3,
yend = c(1, 1, 1)/3,
zend = c(1, 1, 1)/3)
dataset
dataset[c(1,2,3,5)]
dataset <- dataset[c(1,2,3,5)]
dataset
# Create Color Column
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
dataset
# ternaryplot
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
if(isJPG) {
outputFileName <- gsub(".jpg", ".png",imageName)
}
if(isPNG) {
outputFileName <- imageName
}
# save output file
ggsave(plot, filename=outputFileName ,width=7, height=7, path ="output/sequencePlot")
ggsave(plot, filename=outputFileName ,width=7, height=7)
# load required libraries
library(png)
library(magick)
library(ggtern)
library(jpeg)
workimage <- readJPEG("1.jpg")
workimage2 <- readJPEG("2.jpg")
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
dataset <- data.frame("Blue" = as.numeric(BlueArray),
"Red" = as.numeric(RedArray),
"Green" = as.numeric(GreenArray))
workimage <- workimage2
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
dataset <- rbind(c(as.numeric(BlueArray), as.numeric(RedArray), as.numeric(GreenArray)))
dataset2 <- dataset
workimage <- readJPEG("1.jpg")
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
dataset <- data.frame("Blue" = as.numeric(BlueArray),
"Red" = as.numeric(RedArray),
"Green" = as.numeric(GreenArray))
dataset2
dataset2$Red
de<-data.frame("hola","ciao")
names(de)<-c("hello","goodbye")
de
df<-data.frame("hi","bye")
df
names(df)<-c("hello","goodbye")
df
dataset
workimage <- readJPEG("2.jpg")
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
dataset2 <- data.frame("Blue" = as.numeric(BlueArray),
"Red" = as.numeric(RedArray),
"Green" = as.numeric(GreenArray))
dataset3 <- dataset
dataset3 <- rbind(dataset, dataset2)
dataset
dataset3 <- rbind(dataset3, dataset2)
# load required libraries
library(png)
library(ggtern)
library(jpeg)
setwd("C:/Users/User/IdeaProjects/TernaryPlotter/input/sequenceImages")
fileList <- list.files(path = ".")
workimage <- 0
dataset <- NULL
for (i in fileList) {
if(grepl(".jpg", i)){
workimage <- readJPEG(i)}
if(grepl(".png", i)){
workimage <- readPNG(i)}
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
dataset2 <- data.frame("Blue" = as.numeric(BlueArray),
"Red" = as.numeric(RedArray),
"Green" = as.numeric(GreenArray))
dataset2 <- subset(dataset2, ((Red + Blue + Green) != 0))
if(is.null(dataset)){
dataset <- dataset2
} else {
dataset <- rbind(dataset,dataset2)
}
}
setwd("C:/Users/User/IdeaProjects/TernaryPlotter/input/combinationImages")
fileList <- list.files(path = ".")
workimage <- 0
dataset <- NULL
for (i in fileList) {
if(grepl(".jpg", i)){
workimage <- readJPEG(i)}
if(grepl(".png", i)){
workimage <- readPNG(i)}
RedArray <- workimage[,,1]
GreenArray <- workimage[,,2]
BlueArray <- workimage[,,3]
dataset2 <- data.frame("Blue" = as.numeric(BlueArray),
"Red" = as.numeric(RedArray),
"Green" = as.numeric(GreenArray))
dataset2 <- subset(dataset2, ((Red + Blue + Green) != 0))
if(is.null(dataset)){
dataset <- dataset2
} else {
dataset <- rbind(dataset,dataset2)
}
}
# clear memory
rm(workimage,RedArray,GreenArray,BlueArray)
# Create Color Column
dataset$Color <- rgb(dataset$Red, dataset$Green, dataset$Blue)
# axes separator lines for the ternary plot
lines <- data.frame(x = c(0.5, 0, 0.5),
y = c(0.5, 0.5, 0),
z = c(0, 0.5, 0.5),
xend = c(1, 1, 1)/3,
yend = c(1, 1, 1)/3,
zend = c(1, 1, 1)/3)
# ternaryplot
plot <- ggtern(dataset, aes(Blue,Red,Green)) + geom_point(alpha = 0.15, shape = 16, color = dataset$Color) +
geom_segment(data = lines, aes(x, y, z, xend = xend, yend = yend, zend = zend),
color = 'black', size = 1) + theme_rgbw() + theme_hidegrid()
#setwd("C:/Users/User/IdeaProjects/TernaryPlotter")
# save output file
ggsave(plot, filename="SumPlot.png" ,width=7, height=7)
setwd("C:/Users/User/IdeaProjects/TernaryPlotter")
# save output file
ggsave(plot, filename="SumPlot.png" ,width=7, height=7, path = "output")
